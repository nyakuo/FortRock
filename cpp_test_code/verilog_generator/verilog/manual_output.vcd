$date
	Fri May  1 17:42:33 2015
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var event 1 ! finish_calc $end
$var wire 1 " fin $end
$var wire 8 # w_o_output [7:0] $end
$var reg 1 $ ce $end
$var reg 8 % i_a [7:0] $end
$var reg 8 & i_b [7:0] $end
$var reg 1 ' i_clk $end
$var reg 8 ( o_output [7:0] $end
$var reg 1 ) req $end
$var reg 1 * res $end
$scope module manual $end
$var wire 8 + i_a [7:0] $end
$var wire 8 , i_b [7:0] $end
$var wire 1 - i_ce_p $end
$var wire 1 . i_clk $end
$var wire 1 / i_req_p $end
$var wire 1 0 i_res_p $end
$var wire 8 1 mw_adder1_output [7:0] $end
$var wire 8 2 mw_adder2_output [7:0] $end
$var reg 8 3 mr_adder1_i_a [7:0] $end
$var reg 8 4 mr_adder1_i_b [7:0] $end
$var reg 1 5 mr_adder1_is_sub $end
$var reg 8 6 mr_adder2_i_a [7:0] $end
$var reg 8 7 mr_adder2_i_b [7:0] $end
$var reg 1 8 mr_adder2_is_sub $end
$var reg 1 9 o_fin_p $end
$var reg 8 : o_out [7:0] $end
$var reg 3 ; r_sys_state [2:0] $end
$var reg 3 < r_sys_step [2:0] $end
$scope module adder1 $end
$var wire 1 - ce $end
$var wire 1 . clock $end
$var wire 8 = i_a [7:0] $end
$var wire 8 > i_b [7:0] $end
$var wire 1 ? is_sub $end
$var reg 8 @ o_output [7:0] $end
$upscope $end
$scope module adder2 $end
$var wire 1 - ce $end
$var wire 1 . clock $end
$var wire 8 A i_a [7:0] $end
$var wire 8 B i_b [7:0] $end
$var wire 1 C is_sub $end
$var reg 8 D o_output [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx D
xC
bx B
bx A
bx @
x?
bx >
bx =
bx <
bx ;
bx :
x9
x8
bx 7
bx 6
x5
bx 4
bx 3
bx 2
bx 1
x0
x/
0.
x-
bx ,
bx +
x*
x)
bx (
0'
bx &
bx %
x$
bx #
x"
1!
$end
#2
1'
1.
#4
0'
0.
#5
b0 (
0)
0/
0*
00
#6
1'
1.
#8
0'
0.
#10
b0 <
b0 ;
09
0"
1'
1.
1*
10
#12
0'
0.
#14
1'
1.
#15
0*
00
#16
0'
0.
#18
1'
1.
#20
0'
0.
1$
1-
#22
1'
1.
#24
0'
0.
#25
b11 %
b11 +
#26
1'
1.
#28
0'
0.
#30
b1 ;
1'
1.
1)
1/
b101 &
b101 ,
#32
0'
0.
#34
08
0C
b11 7
b11 B
b101 6
b101 A
05
0?
b11 4
b11 >
b11 3
b11 =
b1 <
1'
1.
#35
0)
0/
#36
0'
0.
#38
b110 @
b110 1
b1000 D
b1000 2
b10 <
1'
1.
#40
0'
0.
#42
b1000 4
b1000 >
b110 3
b110 =
b11 <
1'
1.
#44
0'
0.
#46
b1110 @
b1110 1
b100 <
1'
1.
#48
0'
0.
#50
b0 ;
19
1"
b1110 :
b1110 #
b101 <
1'
1.
#52
0'
0.
#54
b1110 (
b0 <
09
0"
1!
1'
1.
